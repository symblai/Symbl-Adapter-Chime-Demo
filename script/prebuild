#!/usr/bin/env ruby
require 'json'

def verbose command
  puts("--> #{command}") || system(command) || fail("Failed: #{command}")
end

Dir.chdir(File.expand_path(File.join(File.dirname(__FILE__), '..')))
base = File.read('.base-branch').strip
commits = `git rev-list #{base}..`.strip.split("\n")

if commits.size == 0
  puts "OK: branch is equal with #{base}"
elsif commits.size == 1
  puts "OK: branch contains one commit on top of #{base}"
  commit_files = `git diff-tree --no-commit-id --name-only -r #{commits[0]}`.strip.split("\n")
  uncommitted_files = `git status -s`.strip
  unless uncommitted_files.length == 0
    STDERR.puts "Error: there are uncommitted changes:\n #{uncommitted_files}"
    exit 1
  end
  if commit_files.include?('CHANGELOG.md')
    puts "OK: branch contains CHANGELOG.md"
  else
    STDERR.puts "Error: Does not contain CHANGELOG.md in the commit #{commits[0]}"
    exit 1
  end

  unless ARGV.include?('--publish')
    version_file = 'src/versioning/Versioning.ts'

    #Reset to the base version
    base_version = JSON.parse(`git show #{`cat .base-branch`.strip}:package.json`)['version']
    package_json = JSON.parse(File.read('package.json'))
    package_json['version'] = base_version
    File.write('package.json', JSON.pretty_generate(package_json))

    #Increase to new version
    verbose("npm version patch --no-git-tag-version")
    package_json = JSON.parse(File.read('package.json'))
    new_version = package_json['version']
    puts "Increasing patch version from #{base_version} to #{new_version}"
    File.write(version_file, File.read(version_file).gsub(/return '[.0-9]+';/, "return '#{new_version}';"))

    #Pull in npm audit fixes automatically
    verbose('npm audit fix')

    verbose("git add #{version_file}")
    verbose("git add package.json")
    verbose("git add package-lock.json")
    verbose("git commit --amend --no-edit")
  end
elsif commits.size == 2 && `git diff #{commits[0]} #{commits[1]}`.strip == ''
  puts "OK: branch contains empty merge commit followed by one commit on top of #{base}"
else
  STDERR.puts "Error: branch contains multiple commits (#{commits.join(', ')})"
  exit 1
end
